<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.sm.repository.ReviewRepository">

    <!-- ★ 여기: 중첩 클래스는 $ 로 구분 ★ -->
    <resultMap id="ReviewVOMap" type="edu.sm.repository.ReviewRepository$ReviewVO">
        <id     property="reviewId"     column="review_id"/>
        <result property="reviewerId"   column="reviewer_id"/>
        <result property="reviewerName" column="reviewer_name"/>
        <result property="productName"  column="product_name"/>
        <result property="rating"       column="rating"/>
        <result property="content"      column="content"/>
        <result property="reviewDate"   column="review_date"/>
    </resultMap>

    <!-- 판매자가 받은 리뷰(구매자가 작성) -->
    <select id="findReceived" parameterType="string" resultMap="ReviewVOMap">
        SELECT
            r.review_id,
            r.reviewer_id,
            u.name          AS reviewer_name,
            p.product_name,
            r.rating,
            r.content,
            r.review_date
        FROM Review        r
                 JOIN Trade_History t ON t.trade_id   = r.trade_id
                 JOIN Product       p ON p.product_id = t.product_id
                 JOIN User          u ON u.user_id    = r.reviewer_id
        WHERE t.seller_id  = #{userId}
          AND r.reviewer_id = t.buyer_id
        ORDER BY r.review_date DESC
    </select>
    
    <!-- 리뷰 작성 -->
    <insert id="insertReview" parameterType="edu.sm.dto.Review" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO Review (trade_id, reviewer_id, rating, content, review_date)
        VALUES (#{tradeId}, #{reviewerId}, #{rating}, #{content}, #{reviewDate})
    </insert>
    
    <!-- 상품별 리뷰 조회 -->
    <select id="findByProductId" parameterType="int" resultType="edu.sm.dto.Review">
        SELECT r.review_id, r.reviewer_id, r.rating, r.content, r.review_date
        FROM Review r
        JOIN Trade_History t ON r.trade_id = t.trade_id
        WHERE t.product_id = #{productId}
        ORDER BY r.review_date DESC
    </select>
    
    <!-- 사용자가 작성한 리뷰 조회 -->
    <select id="findWritten" parameterType="string" resultMap="ReviewVOMap">
        SELECT
            r.review_id,
            r.reviewer_id,
            u.name          AS reviewer_name,
            p.product_name,
            r.rating,
            r.content,
            r.review_date
        FROM Review        r
                 JOIN Trade_History t ON t.trade_id   = r.trade_id
                 JOIN Product       p ON p.product_id = t.product_id
                 JOIN User          u ON u.user_id    = r.reviewer_id
        WHERE r.reviewer_id = #{userId}
        ORDER BY r.review_date DESC
    </select>
    
    <!-- 리뷰 ID로 조회 -->
    <select id="findById" parameterType="int" resultType="edu.sm.dto.Review">
        SELECT review_id, trade_id, reviewer_id, rating, content, review_date
        FROM Review
        WHERE review_id = #{reviewId}
    </select>
    
    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="int">
        DELETE FROM Review WHERE review_id = #{reviewId}
    </delete>

</mapper>
